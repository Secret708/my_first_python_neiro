# –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ (–¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏)

import numpy as np
import os

def shuffle_dataset(input_path, output_path=None, random_seed=42):
    """
    –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç .npz —Å–æ—Ö—Ä–∞–Ω—è—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ images-labels
    
    Args:
        input_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É
        output_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        random_seed: seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    """
    
    print("üîÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º {input_path}")
    data = np.load(input_path)
    images = data['images']
    labels = data['labels']
    
    print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
    if len(images) != len(labels):
        print("‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ images –∏ labels –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
        return False
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    print("\nüìà –ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
    unique, counts = np.unique(labels, return_counts=True)
    for digit, count in zip(unique, counts):
        print(f"   –¶–∏—Ñ—Ä–∞ {digit}: {count} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –º–µ—Ç–æ–∫ –¥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    print(f"\nüî¢ –ü–µ—Ä–≤—ã–µ 20 –º–µ—Ç–æ–∫ –î–û –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è:")
    print(f"   {labels[:20]}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    np.random.seed(random_seed)
    indices = np.random.permutation(len(images))
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    shuffled_images = images[indices]
    shuffled_labels = labels[indices]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    if output_path is None:
        base_name = os.path.splitext(input_path)[0]
        output_path = f"{base_name}_shuffled.npz"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –∫–∞–∫ {output_path}")
    np.savez(output_path, images=shuffled_images, labels=shuffled_labels)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è...")
    shuffled_data = np.load(output_path)
    check_images = shuffled_data['images']
    check_labels = shuffled_data['labels']
    
    print(f"\nüéâ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(check_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    print(f"üî¢ –ü–µ—Ä–≤—ã–µ 20 –º–µ—Ç–æ–∫ –ü–û–°–õ–ï –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è:")
    print(f"   {check_labels[:20]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
    unique_after, counts_after = np.unique(check_labels, return_counts=True)
    for digit, count in zip(unique_after, counts_after):
        print(f"   –¶–∏—Ñ—Ä–∞ {digit}: {count} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    if np.array_equal(counts, counts_after):
        print("   ‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å!")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    file_size = os.path.getsize(output_path) / (1024 * 1024)
    print(f"üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} –ú–ë")
    
    return True

def check_shuffle_quality(dataset_path, sample_size=50):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    """
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è...")
    
    data = np.load(dataset_path)
    labels = data['labels']
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –ø–µ—Ä–≤—ã—Ö sample_size –ø—Ä–∏–º–µ—Ä–∞—Ö
    first_samples = labels[:sample_size]
    unique_in_first = len(np.unique(first_samples))
    
    print(f"   –í –ø–µ—Ä–≤—ã—Ö {sample_size} –ø—Ä–∏–º–µ—Ä–∞—Ö:")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–∏—Ñ—Ä: {unique_in_first}/10")
    print(f"   –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ: {unique_in_first/10*100:.1f}%")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä—ã –≤ –Ω–∞—á–∞–ª–µ
    print(f"   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ:")
    unique, counts = np.unique(first_samples, return_counts=True)
    for digit, count in zip(unique, counts):
        print(f"      {digit}: {count} —Ä–∞–∑")
    
    return unique_in_first

def main():
    # ‚ö†Ô∏è –£–ö–ê–ñ–ò–¢–ï –ü–£–¢–¨ –ö –í–ê–®–ï–ú–£ –î–ê–¢–ê–°–ï–¢–£ –ó–î–ï–°–¨ ‚ö†Ô∏è
    input_dataset = "custom_dataset_10000.npz"          # –ò—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    output_dataset = "custom_dataset_shuffled_10000.npz" # –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(input_dataset):
        print(f"‚ùå –§–∞–π–ª {input_dataset} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
    success = shuffle_dataset(input_dataset, output_dataset, random_seed=42)
    
    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
        diversity = check_shuffle_quality(output_dataset)
        
        if diversity >= 8:  # –•–æ—Ä–æ—à–µ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ - –º–∏–Ω–∏–º—É–º 8 —Ä–∞–∑–Ω—ã—Ö —Ü–∏—Ñ—Ä –≤ –Ω–∞—á–∞–ª–µ
            print(f"\n‚ú® –û—Ç–ª–∏—á–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ! –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")
        else:
            print(f"\n‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ.")
        
        print(f"\nüéØ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {output_dataset} –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏!")
    else:
        print("\nüí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏!")

if __name__ == "__main__":
    main()