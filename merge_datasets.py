# –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–≤—É—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –≤ –æ–¥–∏–Ω

import numpy as np
import os
from collections import defaultdict

def merge_datasets_sorted(dataset1_path, dataset2_path, output_path=None):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞, —Å–æ—Ä—Ç–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∞—Å—Å–∞–º (—Ü–∏—Ñ—Ä–∞–º)
    """
    
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–ª–∞—Å—Å–∞–º...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º {dataset1_path}")
    dataset1 = np.load(dataset1_path)
    images1 = dataset1['images']
    labels1 = dataset1['labels']
    
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º {dataset2_path}")
    dataset2 = np.load(dataset2_path)
    images2 = dataset2['images']
    labels2 = dataset2['labels']
    
    print(f"üìä Dataset1: {len(images1)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"üìä Dataset2: {len(images2)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ –∫–ª–∞—Å—Å–∞–º
    class_data = defaultdict(lambda: {'images': [], 'labels': []})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    for img, lbl in zip(images1, labels1):
        class_data[lbl]['images'].append(img)
        class_data[lbl]['labels'].append(lbl)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    for img, lbl in zip(images2, labels2):
        class_data[lbl]['images'].append(img)
        class_data[lbl]['labels'].append(lbl)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (0, 1, 2, ... 9)
    sorted_classes = sorted(class_data.keys())
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    sorted_images = []
    sorted_labels = []
    
    print("\nüì¶ –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
    for class_id in sorted_classes:
        class_images = class_data[class_id]['images']
        class_labels = class_data[class_id]['labels']
        
        sorted_images.extend(class_images)
        sorted_labels.extend(class_labels)
        
        print(f"   –¶–∏—Ñ—Ä–∞ {class_id}: {len(class_images)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy arrays
    final_images = np.array(sorted_images)
    final_labels = np.array(sorted_labels)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    if output_path is None:
        base1 = os.path.splitext(dataset1_path)[0]
        base2 = os.path.splitext(dataset2_path)[0]
        output_path = f"merged_sorted_{os.path.basename(base1)}_{os.path.basename(base2)}.npz"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –∫–∞–∫ {output_path}")
    np.savez(output_path, images=final_images, labels=final_labels)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    merged_data = np.load(output_path)
    check_images = merged_data['images']
    check_labels = merged_data['labels']
    
    print("\nüéâ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   üìä –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(check_images)}")
    print(f"   üè∑Ô∏è  –í—Å–µ–≥–æ –º–µ—Ç–æ–∫: {len(check_labels)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º
    unique, counts = np.unique(check_labels, return_counts=True)
    print("   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–∏—Ñ—Ä–∞–º:")
    for digit, count in zip(unique, counts):
        print(f"      –¶–∏—Ñ—Ä–∞ {digit}: {count} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—è–¥–∫–∞
    print(f"\nüîç –ü–µ—Ä–≤—ã–µ 30 –º–µ—Ç–æ–∫ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—è–¥–∫–∞):")
    print(f"   {check_labels[:30]}")
    
    return True

def main(): # –≥–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
    # ‚ö†Ô∏è –£–ö–ê–ñ–ò–¢–ï –ü–£–¢–ò –ö –í–ê–®–ò–ú –î–ê–¢–ê–°–ï–¢–ê–ú –ó–î–ï–°–¨ ‚ö†Ô∏è
    dataset1_path = "dataset_1.npz"      # –ü–µ—Ä–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    dataset2_path = "dataset_2.npz"    # –í—Ç–æ—Ä–æ–π –¥–∞—Ç–∞—Å–µ—Ç  
    output_path = "dataset_3.npz"   # –†–µ–∑—É–ª—å—Ç–∞—Ç
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    for path in [dataset1_path, dataset2_path]:
        if not os.path.exists(path):
            print(f"‚ùå –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
    success = merge_datasets_sorted(dataset1_path, dataset2_path, output_path)
    
    if success:
        print("\n‚ú® –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–ª–∞—Å—Å–∞–º –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
        print("   –¢–µ–ø–µ—Ä—å –≤—Å–µ —Ü–∏—Ñ—Ä—ã –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É: 0, 0, 0..., 1, 1, 1..., 2, 2, 2... –∏ —Ç.–¥.")
    else:
        print("\nüí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏!")
        
if __name__ == '__main__':
    main()