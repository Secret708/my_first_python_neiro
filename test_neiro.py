# –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö 
# –∏–∑ –ø–∞–ø–∫–∏ my_digits, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–ª—É—á–∏–ª–∏ 
# –∏–∑ —Ñ–∞–π–ª–∞ main.py 

import tensorflow as tf
import numpy as np
from PIL import Image
import os
import glob

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å, –æ–±—É—á–µ–Ω–Ω—É—é –Ω–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
model = tf.keras.models.load_model('–æ–≤–æ—â.h5')
print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

def preprocess_image(image_path):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ - –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    img = Image.open(image_path)
    img = img.convert('L')
    img = img.resize((28, 28), Image.LANCZOS)
    img_array = np.array(img)
    
    # –ò–ù–í–ï–†–¢–ò–†–£–ï–ú: –±–µ–ª–æ–µ –Ω–∞ —á–µ—Ä–Ω–æ–º -> —á–µ—Ä–Ω–æ–µ –Ω–∞ –±–µ–ª–æ–º
    img_array = 255 - img_array
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    img_array = img_array.astype("float32") / 255.0
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    img_array = np.expand_dims(img_array, axis=0)
    img_array = np.expand_dims(img_array, axis=-1)
    
    return img_array

def show_image_preview(image_path):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –º–æ–¥–µ–ª—å –≤–∏–¥–∏—Ç –≤–∞—à—É —Ü–∏—Ñ—Ä—É"""
    img = Image.open(image_path)
    img = img.convert('L')
    img = img.resize((28, 28), Image.LANCZOS)
    img_array = np.array(img)
    img_array = 255 - img_array
    
    print("\n" + "="*40)
    print("–ö–∞–∫ –º–æ–¥–µ–ª—å –≤–∏–¥–∏—Ç –≤–∞—à—É —Ü–∏—Ñ—Ä—É:")
    print("="*40)
    
    for y in range(28):
        line = ""
        for x in range(28):
            brightness = img_array[y][x]
            if brightness > 128:
                line += "‚ñà‚ñà"
            elif brightness > 64:
                line += "‚ñë‚ñë"
            else:
                line += "  "
        print(line)
    print("="*40)

def predict_digit(image_path):
    show_image_preview(image_path)
    
    processed_img = preprocess_image(image_path)
    predictions = model.predict(processed_img, verbose=0)
    predicted_digit = np.argmax(predictions[0])
    confidence = np.max(predictions[0])
    
    print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:")
    print(f"   –¶–∏—Ñ—Ä–∞: {predicted_digit}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    print("\nüìä –í—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
    for digit, prob in enumerate(predictions[0]):
        marker = " ‚Üê" if digit == predicted_digit else ""
        print(f"   {digit}: {prob:.2%}{marker}")
    
    return predicted_digit

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
if __name__ == "__main__":
    folder = "my_digits"
    if os.path.exists(folder):
        image_files = glob.glob(f"{folder}/*.png")
        
        if image_files:
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            for image_file in image_files:
                print(f"\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {os.path.basename(image_file)}")
                predict_digit(image_file)
        else:
            print("‚ùå –ù–µ—Ç PNG —Ñ–∞–π–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ä–∏—Å—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã!")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ 'my_digits' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")